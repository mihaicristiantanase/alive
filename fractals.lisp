(in-package #:alive)

(defparameter *mandelbrot-factor* 0)
(defparameter *mandelbrot-max* 1e6)
(defparameter *max* (* *mandelbrot-max* (sqrt 2)))
(defparameter *2max* (* 2 *max*))

(defun mandelbrot-try-base (x y &key constant iterations)
  (let ((c (complex x y))
        (last-i 0))
    (loop for i from 0 to iterations
          while (and (< (abs (realpart c)) *max*) (< (abs (imagpart c)) *max*))
          do (progn (setf c (+ (* c c) constant)
                          last-i i)))
    (values (realpart c)
            (imagpart c)
            (/ last-i iterations))))

(defun mandelbrot-try1 (x y &key (constant *mandelbrot-factor*) (iterations 10))
  (multiple-value-bind (r i s)
      (mandelbrot-try-base x y :constant constant :iterations iterations)
    (values (/ (+ r *max*) *2max*)
            (/ (+ r *max*) *2max*)
            (/ (+ r *max*) *2max*))))

(defun mandelbrot-try2 (x y &key (constant *mandelbrot-factor*) (iterations 10))
  (multiple-value-bind (r i s)
      (mandelbrot-try-base x y :constant constant :iterations iterations)
    (values (/ (+ r *max*) *2max*)
            (/ (+ i *max*) *2max*)
            0.4)))

(defun mandelbrot-try3 (x y &key (constant *mandelbrot-factor*) (iterations 10))
  (multiple-value-bind (r i s)
      (mandelbrot-try-base x y :constant constant :iterations iterations)
    (values (/ (+ r *max*) *2max*)
            (/ (+ i *max*) *2max*)
            (abs (cos (* 0.3 (/ (+ r *max*) *2max*)))))))
